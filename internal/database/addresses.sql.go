// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: addresses.sql

package database

import (
	"context"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO addresses (user_id, street, city, state, zip_code, country)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, user_id, street, city, state, zip_code, country, created_at, updated_at
`

type CreateAddressParams struct {
	UserID  int64
	Street  string
	City    string
	State   string
	ZipCode string
	Country string
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.UserID,
		arg.Street,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Country,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Street,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAddressByID = `-- name: GetAddressByID :one
SELECT id, user_id, street, city, state, zip_code, country, created_at, updated_at FROM addresses
WHERE id = ?
`

func (q *Queries) GetAddressByID(ctx context.Context, id int64) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddressByID, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Street,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAddressesByUserID = `-- name: GetAddressesByUserID :many
SELECT id, user_id, street, city, state, zip_code, country, created_at, updated_at FROM addresses
WHERE user_id = ?
`

func (q *Queries) GetAddressesByUserID(ctx context.Context, userID int64) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, getAddressesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Street,
			&i.City,
			&i.State,
			&i.ZipCode,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
