// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: books.sql

package database

import (
	"context"
	"database/sql"
)

const getBookByID = `-- name: GetBookByID :one
SELECT id, title, author, description, price, available_stock, is_rentable, rental_price_per_day, img_url
FROM books
WHERE id = ?
`

type GetBookByIDRow struct {
	ID                int64
	Title             string
	Author            sql.NullString
	Description       sql.NullString
	Price             float64
	AvailableStock    sql.NullInt64
	IsRentable        sql.NullBool
	RentalPricePerDay sql.NullFloat64
	ImgUrl            sql.NullString
}

func (q *Queries) GetBookByID(ctx context.Context, id int64) (GetBookByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getBookByID, id)
	var i GetBookByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.Price,
		&i.AvailableStock,
		&i.IsRentable,
		&i.RentalPricePerDay,
		&i.ImgUrl,
	)
	return i, err
}

const getBooksByOffset = `-- name: GetBooksByOffset :many
WITH book_count AS (
    SELECT COUNT(*) AS total_count FROM books
)
SELECT total_count, b.id, b.title, b.author, b.description, b.price, b.available_stock, b.is_rentable, b.rental_price_per_day, b.created_at, b.updated_at, b.img_url
FROM book_count, (
    SELECT id, title, author, description, price, available_stock, is_rentable, rental_price_per_day, created_at, updated_at, img_url FROM books
    ORDER BY id
    LIMIT ? OFFSET ?
) AS b
`

type GetBooksByOffsetParams struct {
	Limit  int64
	Offset int64
}

type GetBooksByOffsetRow struct {
	TotalCount        int64
	ID                int64
	Title             string
	Author            sql.NullString
	Description       sql.NullString
	Price             float64
	AvailableStock    sql.NullInt64
	IsRentable        sql.NullBool
	RentalPricePerDay sql.NullFloat64
	CreatedAt         sql.NullTime
	UpdatedAt         sql.NullTime
	ImgUrl            sql.NullString
}

func (q *Queries) GetBooksByOffset(ctx context.Context, arg GetBooksByOffsetParams) ([]GetBooksByOffsetRow, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByOffset, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBooksByOffsetRow
	for rows.Next() {
		var i GetBooksByOffsetRow
		if err := rows.Scan(
			&i.TotalCount,
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Price,
			&i.AvailableStock,
			&i.IsRentable,
			&i.RentalPricePerDay,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImgUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
