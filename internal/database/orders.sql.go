// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package database

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, address_id, total_price)
VALUES (?, ?, ?)
RETURNING id, user_id, address_id, total_price, status, created_at, updated_at, "foreign"
`

type CreateOrderParams struct {
	UserID     int64
	AddressID  int64
	TotalPrice float64
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.UserID, arg.AddressID, arg.TotalPrice)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AddressID,
		&i.TotalPrice,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Foreign,
	)
	return i, err
}

const createOrderItems = `-- name: CreateOrderItems :exec
INSERT INTO order_items (order_id, book_id, quantity, price_per_item)
VALUES (?, ?, ?, ?)
`

type CreateOrderItemsParams struct {
	OrderID      int64
	BookID       int64
	Quantity     sql.NullInt64
	PricePerItem float64
}

func (q *Queries) CreateOrderItems(ctx context.Context, arg CreateOrderItemsParams) error {
	_, err := q.db.ExecContext(ctx, createOrderItems,
		arg.OrderID,
		arg.BookID,
		arg.Quantity,
		arg.PricePerItem,
	)
	return err
}

const getOrderByUserId = `-- name: GetOrderByUserId :many
SELECT id, user_id, address_id, total_price, status, created_at, updated_at, "foreign" FROM orders WHERE user_id = ?
`

func (q *Queries) GetOrderByUserId(ctx context.Context, userID int64) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrderByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AddressID,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Foreign,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
