// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (first_name, last_name, email, password_hash, role)
VALUES (?, ?, ?, ?, ?)
RETURNING id, first_name, last_name, email, role, created_at, updated_at
`

type CreateUserParams struct {
	FirstName    string
	LastName     string
	Email        string
	PasswordHash string
	Role         string
}

type CreateUserRow struct {
	ID        int64
	FirstName string
	LastName  string
	Email     string
	Role      string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, first_name, last_name, email, role, created_at, updated_at
FROM users
`

type GetAllUsersRow struct {
	ID        int64
	FirstName string
	LastName  string
	Email     string
	Role      string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, role, created_at, updated_at
FROM users
WHERE email = ?
`

type GetUserByEmailRow struct {
	ID        int64
	FirstName string
	LastName  string
	Email     string
	Role      string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserIdRoleAndPasswordByEmail = `-- name: GetUserIdRoleAndPasswordByEmail :one
SELECT id, role, password_hash
FROM users
WHERE email = ?
`

type GetUserIdRoleAndPasswordByEmailRow struct {
	ID           int64
	Role         string
	PasswordHash string
}

func (q *Queries) GetUserIdRoleAndPasswordByEmail(ctx context.Context, email string) (GetUserIdRoleAndPasswordByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserIdRoleAndPasswordByEmail, email)
	var i GetUserIdRoleAndPasswordByEmailRow
	err := row.Scan(&i.ID, &i.Role, &i.PasswordHash)
	return i, err
}
