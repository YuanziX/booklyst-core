// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package database

import (
	"context"
	"database/sql"
)

const addItemToCart = `-- name: AddItemToCart :exec
INSERT INTO cart_items (user_id, book_id, quantity, created_at, updated_at)
VALUES (?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
ON CONFLICT(user_id, book_id)
DO UPDATE SET
    quantity = excluded.quantity,
    updated_at = CURRENT_TIMESTAMP
`

type AddItemToCartParams struct {
	UserID   int64
	BookID   int64
	Quantity sql.NullInt64
}

func (q *Queries) AddItemToCart(ctx context.Context, arg AddItemToCartParams) error {
	_, err := q.db.ExecContext(ctx, addItemToCart, arg.UserID, arg.BookID, arg.Quantity)
	return err
}

const getCartItemsByUserID = `-- name: GetCartItemsByUserID :many
SELECT c.book_id, c.quantity, b.title, b.price
FROM cart_items c
JOIN books b
ON c.book_id = b.id
WHERE user_id = ?
`

type GetCartItemsByUserIDRow struct {
	BookID   int64
	Quantity sql.NullInt64
	Title    string
	Price    float64
}

func (q *Queries) GetCartItemsByUserID(ctx context.Context, userID int64) ([]GetCartItemsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getCartItemsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartItemsByUserIDRow
	for rows.Next() {
		var i GetCartItemsByUserIDRow
		if err := rows.Scan(
			&i.BookID,
			&i.Quantity,
			&i.Title,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeItemFromCart = `-- name: RemoveItemFromCart :exec
DELETE FROM cart_items
WHERE user_id = ? AND book_id = ?
`

type RemoveItemFromCartParams struct {
	UserID int64
	BookID int64
}

func (q *Queries) RemoveItemFromCart(ctx context.Context, arg RemoveItemFromCartParams) error {
	_, err := q.db.ExecContext(ctx, removeItemFromCart, arg.UserID, arg.BookID)
	return err
}
